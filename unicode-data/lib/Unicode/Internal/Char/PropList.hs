-- autogenerated from https://www.unicode.org/Public/15.0.0/ucd/PropList.txt
-- |
-- Module      : Unicode.Internal.Char.PropList
-- Copyright   : (c) 2020 Composewell Technologies and Contributors
-- License     : Apache-2.0
-- Maintainer  : streamly@composewell.com
-- Stability   : experimental

{-# OPTIONS_HADDOCK hide #-}
{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# HLINT ignore "Use camelCase" #-}

module Unicode.Internal.Char.PropList
    ( isPattern_Syntax
    , isPattern_White_Space
    , isWhite_Space
    ) where

import Data.Bits (Bits(..))
import Data.Char (ord)
import Data.Int (Int8)
import Data.Word (Word8, Word16)
import GHC.Exts (Ptr(..))
import Unicode.Internal.Bits (lookupBit, lookupWord16AsInt, lookupWord8AsInt)

{-# INLINE isPattern_Syntax #-}
isPattern_Syntax :: Char -> Bool
isPattern_Syntax = \c -> let cp = ord c in cp >= 0x0021 && cp <= 0xFE46 && lookupIsPattern_SyntaxBitMap cp

{-# INLINE lookupIsPattern_SyntaxBitMap #-}
lookupIsPattern_SyntaxBitMap :: Int -> Bool
lookupIsPattern_SyntaxBitMap n =
    lookupBit data# (
        lookupWord16AsInt offsets1# (
            lookupWord8AsInt offsets2# (
                n `shiftR` 12
            ) + ((n `shiftR` 9) .&. maskOffsets)
        ) + ((n `shiftR` 3) .&. maskData)
    ) (n .&. 7)
    where
    maskData = (1 `shiftL` 6) - 1
    maskOffsets = (1 `shiftL` 3) - 1
    !(Ptr data#) = isPattern_SyntaxDataBitMap
    !(Ptr offsets1#) = isPattern_SyntaxOffsets1BitMap
    !(Ptr offsets2#) = isPattern_SyntaxOffsets2BitMap

isPattern_SyntaxDataBitMap :: Ptr Int8
isPattern_SyntaxDataBitMap = Ptr
    "\14\255\255\255\1\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\192\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\254\255\0\252\1\0\0\
    \\120\1\0\0\120\0\0\0\0\254\90\67\136\0\0\128\0\0\0\128\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\255\255\255\255\255\255\255\255\255\255\255\255\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\63\0\0\0\240\255\255\255\255\255\255\255\255\255\255\255\255\255\0\0\
    \\255\255\255\0\255\127\254\255\239\127\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\255\255\
    \\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \\255\255\255\255\255\255\255\255\255\255\255\255\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\192\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\96\0\0\0"#

isPattern_SyntaxOffsets1BitMap :: Ptr Word16
isPattern_SyntaxOffsets1BitMap = Ptr
    "\89\0\120\0\120\0\120\0\120\0\120\0\120\0\120\0\120\0\0\0\120\0\120\0\120\0\120\0\120\0\120\0\120\0\25\0\4\2\42\1\216\0\184\0\234\0\216\0\216\0\120\0\140\1"#

isPattern_SyntaxOffsets2BitMap :: Ptr Word8
isPattern_SyntaxOffsets2BitMap = Ptr
    "\0\1\19\9\1\1\1\1\1\1\1\1\1\1\1\11"#

{-# INLINE isPattern_White_Space #-}
isPattern_White_Space :: Char -> Bool
isPattern_White_Space = \c -> let cp = ord c in cp >= 0x0009 && cp <= 0x2029 && lookupIsPattern_White_SpaceBitMap cp

{-# INLINE lookupIsPattern_White_SpaceBitMap #-}
lookupIsPattern_White_SpaceBitMap :: Int -> Bool
lookupIsPattern_White_SpaceBitMap n =
    lookupBit data# (
        lookupWord8AsInt offsets1# (
            lookupWord8AsInt offsets2# (
                n `shiftR` 11
            ) + ((n `shiftR` 9) .&. maskOffsets)
        ) + ((n `shiftR` 3) .&. maskData)
    ) (n .&. 7)
    where
    maskData = (1 `shiftL` 6) - 1
    maskOffsets = (1 `shiftL` 2) - 1
    !(Ptr data#) = isPattern_White_SpaceDataBitMap
    !(Ptr offsets1#) = isPattern_White_SpaceOffsets1BitMap
    !(Ptr offsets2#) = isPattern_White_SpaceOffsets2BitMap

isPattern_White_SpaceDataBitMap :: Ptr Int8
isPattern_White_SpaceDataBitMap = Ptr
    "\0\62\0\0\1\0\0\0\0\0\0\0\0\0\0\0\32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\192\0\0\0\3\
    \\0\0"#

isPattern_White_SpaceOffsets1BitMap :: Ptr Word8
isPattern_White_SpaceOffsets1BitMap = Ptr
    "\0\17\17\17\17\144"#

isPattern_White_SpaceOffsets2BitMap :: Ptr Word8
isPattern_White_SpaceOffsets2BitMap = Ptr
    "\0\1\1\1\5"#

{-# INLINE isWhite_Space #-}
isWhite_Space :: Char -> Bool
isWhite_Space = \c -> let cp = ord c in cp >= 0x0009 && cp <= 0x3000 && lookupIsWhite_SpaceBitMap cp

{-# INLINE lookupIsWhite_SpaceBitMap #-}
lookupIsWhite_SpaceBitMap :: Int -> Bool
lookupIsWhite_SpaceBitMap n =
    lookupBit data# (
        lookupWord8AsInt offsets1# (
            lookupWord8AsInt offsets2# (
                n `shiftR` 11
            ) + ((n `shiftR` 9) .&. maskOffsets)
        ) + ((n `shiftR` 3) .&. maskData)
    ) (n .&. 7)
    where
    maskData = (1 `shiftL` 6) - 1
    maskOffsets = (1 `shiftL` 2) - 1
    !(Ptr data#) = isWhite_SpaceDataBitMap
    !(Ptr offsets1#) = isWhite_SpaceOffsets1BitMap
    !(Ptr offsets2#) = isWhite_SpaceOffsets2BitMap

isWhite_SpaceDataBitMap :: Ptr Int8
isWhite_SpaceDataBitMap = Ptr
    "\0\62\0\0\1\0\0\0\0\0\0\0\0\0\0\0\32\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\255\7\0\0\0\131\0\0\0\0\0\128\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \\0\0\0\0\0\0\0\0\0\0\0\0\0\0"#

isWhite_SpaceOffsets1BitMap :: Ptr Word8
isWhite_SpaceOffsets1BitMap = Ptr
    "\0\21\21\21\21\69\150\21\21\21\69\4"#

isWhite_SpaceOffsets2BitMap :: Ptr Word8
isWhite_SpaceOffsets2BitMap = Ptr
    "\0\1\2\1\6\1\11"#

